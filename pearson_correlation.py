# -*- coding: utf-8 -*-
"""Pearson Correlation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/embedded/projects/mystery-box-464018/locations/europe-west3/repositories/f71ef3ac-afb3-4406-87ad-2706dc4ba930
"""

# @title Setup
from google.cloud import bigquery
from google.colab import data_table
import bigframes.pandas as bpd

project = 'mystery-box-464018' # Project ID inserted based on the query results selected to explore
location = 'US' # Location inserted based on the query results selected to explore
client = bigquery.Client(project=project, location=location)
data_table.enable_dataframe_formatter()

# Running this code will read results from your previous job

job = client.get_job('YOUR_JOB_ID') # Job ID inserted based on the query results selected to explore
destination = job.destination

# Load data from a BigQuery table using BigFrames DataFrames:
bq_df = bpd.read_gbq(f"{destination.project}.{destination.dataset_id}.{destination.table_id}")

from scipy import stats

#calculation of Pearson correlation
l1 = bq_df['engagement_time']
l2 = bq_df['purchase_revenue']
corr, pvalue = stats.pearsonr(l1, l2)

print("Correlation: {}".format(corr))
print("p-value: {}".format(pvalue))

"""How to interpret values:

---
**statistics** - ranges from -1 to 1, demonstrates is it negative and positive correlation.
<br> **p-value** - smaller is better!
If it is less than 0.05, the correlation is statistically significant. <br> In other case you can confirm null hypothesis about no correlation between selected variables.

"""

#let's try to draw scatter plot
import matplotlib.pyplot as plt

fig, axs = plt.subplots(1, 1, figsize=(10, 8))
fig.suptitle('Scatter Plot between Engagement Time and Purchase Values', fontsize=16)

axs.scatter(l1, l2)

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()

#we observe that - let's check what happens if if drop some higher values
df_2 = bq_df.drop(bq_df[bq_df.engagement_time >400].index)
l1_2 = df_2['engagement_time']
l2_2 = df_2['purchase_revenue']
stats.pearsonr(l1_2, l2_2)

#Correlation results are still low - but let's try to draw scatter plot again
import matplotlib.pyplot as plt

fig2, axs2 = plt.subplots(1, 1, figsize=(10, 8))
fig2.suptitle('Scatter Plot between Engagement Time and Purchase Values With dropped values', fontsize=16)

axs2.scatter(l1_2, l2_2)

plt.tight_layout(rect=[0, 0.03, 1, 0.95])
plt.show()
